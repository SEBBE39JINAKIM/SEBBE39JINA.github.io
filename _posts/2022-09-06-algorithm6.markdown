---
title: "[알고리즘] 재귀"
layout: post
date: 2022.09.06
tag:
- Java
- Algorithm
- Back-end
headerImage: true
projects: true
hidden: true 
category: project
author: Jina Kim
externalLink: false
---

## 홀수 구분  
### 문제  
- 수를 입력받아 홀수인지 여부를 리턴   

### 풀이  
```java
public class Blogging {
	public boolean odd(int num) {
    	if(num == 0) return false;
        if(num == 1) return true;
        if(num < 0) return odd(-num);
        return odd(num - 2);
    }
 }
``` 
  
**나의 오답**   
```
if(num % 2 == 0) return false;
if(num % 2 != 0) return true;
return odd(num);
```
문제점  
홀수인지 여부를 파악하기 위해 num을 2로 나눠주는 로직을 세워 재귀로 풀었다고 생각했지만, 이 경우 문제를 가장 작은 단위로 쪼개지 못 했다. 그래서 재귀를 사용 하기 전 이미 결과에 도달해 버렸다.

-----
## 배열의 길이  
### 문제  
- 입력받은 배열의 길이를 리턴   

### 풀이  
```java
public class Blogging {
	public int length(int[] arr){
    	if(arr.length == 0) return 0;
        int head = 1;
        int[] tail = Arrays.copyOfRange(arr, 1, arr.length);
        return head + arrLength(tail);
	}
 }
```

**나의 오답**   
```
if(arr.length == 0) return 0;
return length(arr[0]) + arr.length - 1;
```
문제점  
base case는 잘 작성(더 이상 쪼갤 수 없는 경우)했지만, recursive case 작성에서 재귀적 사고가 부족했다. 배열을 재귀를 이용해 풀 경우 주로, head(맨 앞 요소)와 tail(나머지 요소)의 값을 따로 구분하여 풀어야한다. `int head = 1`는 배열의 길이가 1일 때를 의미하고, tail부분에서 사용한 `Arrays.copyOfRange()`는 배열을 복사해준다.   

-----
## 요소의 제거와 포함
### 문제  
- 입력받은 배열에 입력받은 수(num)개의 요소가 제거된 새로운 배열 리턴   
- 입력받은 배열에 입력받은 수(num)개의 요소만 포함된 새로운 배열 리턴   
(앞에서부터 순차적으로 제거, 포함 시킨다.)  

### 풀이 1  
```java
public class Blogging {
	public int[] drop(int num, int[] arr){
    	if(arr.length == 0 || num == 0) return arr;
        int head = num - 1;
        int[] tail = Arrays.copyOfRange(arr, 1, arr.length);
        return drop(head, tail);
	}
 }
```

**나의 오답**   
```
if(arr.length == 0) return new int[]{};
int head = 0;
```
문제점   
먼저 base case에서 빈 배열 혹은 num이 0일 때 원래 배열을 리턴해준다. head에서는 `num - 1`을 통해 num이 0이 될 때(base case)까지 반복해준다. tail은 1씩 제거해야 하기 때문에 맨 앞에 배열의 요소가 하나 빠진 1부터 길이까지 복사한다.  


### 풀이 2  
```java
public class Blogging {
	public int[] take(int num, int[] arr){
    	if(num == 0 || arr.length == 0) return new int[]{};
        if(num >= arr.length) return arr;
        
        int count = 0;
        if(count == num) {
        	return arr;
		}
        int[] tail = Arrays.copyOfRange(arr, 0, arr.length - 1);
        count++;
        return take(num, tail);
	}
 }
```
`count`는 선택한 요소의 갯수를 체크해준다. 한가지 요소를 제외했기 때문에, 선택할 요소의 갯수의 수를 1 증가 시켜준다.    
tail은 배열의 뒤에서부터 요소를 제거하기 때문에 맨 뒷부분의 요소를 제외한 나머지 배열을 복사해준다.  


-----
## 논리곱(and)
### 문제  
- 입력받은 배열의 모든 요소의 논리곱을 리턴  
(빈 배열의 논리곱은 `true`이다.)  

### 풀이  
```java
public class Blogging {
	public boolean and(boolean[] arr){
    	if(arr.length == 0) return ture;
        boolean head = arr[0];
        boolean tail = and(Arrays.copyOfRange(arr, 1, arr.length));
        
        if(!head || !tail) return false;
        
        return true;
	}
 }
```
빈 배열의 경우 값이 `true`이기 때문에 base case에 길이가 0일 때 true를 리턴 시켜줬다.  
그리고 boolean값으로 배열의 첫 값을 구하고 tail부분에 재귀를 구현했다.  

-----
## 배열 뒤집기  
### 문제  
- 입력받은 배열의 순서가 뒤집힌 배열을 리턴  
(빈 배열은 빈 배열 그대로를 리턴)  

### 풀이  
```java
public class Blogging {
	public int[] reverse(int[] arr){
    	if(arr.length == 0) return arr;
        int[] head = Arrays.copyOfRange(arr, arr.length - 1, arr.length);
        int[] tail = reverse(Arrays.copyOfRange(arr, 0, arr.length - 1));
        int[] result = new int[head.length + tail.length];
        
        System.arraycopy(head, 0, result, 0, head.length);
        System.arraycopy(tail, 0, result, 1, tail.length);
        
        return result;
	} 
 }
```
새로운 배열에 기존 배열의 마지막 인덱스의 값부터 넣어주는 방식으로 접근했다.   
base case는 빈 배열을 입력한 경우 빈 배열을 리턴했다.   
recursive case에서는 배열의 가장 마지막 요소만 가지고 있는 head 배열을 복사했고, 남은 요소를 가진 tail 배열을 배열의 요소가 모두 제거될 때까지 재귀를 사용해 호출했다. 그 이후 head와 tail을 합친 새로운 배열 result를 선언했다. `System.arraycopy`를 사용해 head와 tail을 result 배열에 합쳐 리턴했다.  
