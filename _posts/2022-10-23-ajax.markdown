---
title: "AJAX"
layout: post
date: 2022.10.23
headerImage: false
tag:
- JavaScript
- Concept
- Front-end
category: study
author: Jina Kim
---

## AJAX 란?  

**Single Page Application**  

직관적으로 알기 쉽고 상호작용 가능한 요소들을 이용해 유저 경험을 극대화 한다.   

유저의 입력과 요청에 의한 콘텐츠나 정보가 새로운 페이지를 불러오지 않고 현재 페이지에서 이루어진다.  

필수적인 요소만 요청하여 페이지가 새로고침 되는 것을 방지해 유저 경험을 극대화한다.    

**SPA를 만드는 기술: AJAX**   

>**AJAX(Asynchronous JavaScript And XMLHttpRequest)**  
JavaScript, DOM, Fetch, XMLHttpRequest, HTML 등 다양한 기술을 사용하는 웹 개발 기법   
AJAX의 가장 큰 특징은 웹 페이지에 필요한 부분에 필요한 데이터만 비동기적으로 받아와 화면에 그려낼 수 있다는 것이다.  

![](https://velog.velcdn.com/images/wlsk124/post/bdf67544-1984-4070-81dd-075402b774dd/image.png)  

우리가 검색을 하기 위해 구글에 접속하면, 웹페이지의 html에 의해서 유저에게 필요한 페이지가 렌더링 된다. 하지만 딱 한 부분만큼은 html에 작성된 대로 유저가 사용하는 것이 아니고, 유저의 요구에 따라 반응하는 부분이 존재한다.  

그 부분이 바로 검색창이다. 검색창에 글자를 입력할 때마다, 해당 글자로 시작하는 단어들을 서버로부터 받아와, 그 바로 아래 추천검색어로 보여준다.   
-> 검색창에서 필요한 데이터만 비동기적으로 받아 렌더링되며, 이때 AJAX가 사용된다.  

또한 원티드를 예로 들어, 탐색 페이지에서 사용자가 채용 공고 목록 페이지의 맨 밑까지 스크롤 하여 하단에 도달하면, 새로운 채용 공고를 서버로부터 가져와 렌더링한다. 이러한 이벤트를 무한 스크롤이라고 하는데, 무한 스크롤이 발생할 때마다 Fetch를 통해 데이터를 가져와서 업데이트하고 렌더링한다. 이러한 기법을 AJAX라고 한다.  

-----
## AJAX 핵심 기술  

- JavaScript와 DOM
- Fetch

전통적인 웹 애플리케이션에서는 `<form>` 태그를 이용해 서버에 데이터를 전송해야 했다. 또한 서버는 요청에 대한 응답으로 새로운 웹 페이지를 제공해 주어야 했다.   

그러나 Fetch를 사용하면, 페이지를 이동하지 않아도 서버로부터 필요한 데이터를 받아올 수 있다. Fetch는 사용자가 현재 페이지에서 작업을 하는 동안 서버와 통신할 수 있도록 한다. 즉, 브라우저는 Fetch가 서버에 요청을 보내고 응답을 받을 때까지 모든 동작을 멈추는 것이 아니라, 계속해서 페이지를 사용할 수 있게 하는 비동기적인 방식을 사용한다.  

자바스크립트에서 DOM을 사용해 조작할 수 있기 때문에, Fetch를 통해 전체 페이지가 아닌 필요한 데이터만 가져와 DOM에 적용시켜 새로운 페이지로 이동하지 않고 기존 페이지에서 필요한 부분만 변경할 수 있다.  

### XHR과 Fetch  

Fetch 이전에는 XHR(XMLHttpRequest)를 사용했다. Fetch는 XHR의 단점을 보완한 새로운 Web API이며, XML보다 가볍고 JavaScript와 호환되는 JSON을 사용한다.  

```javascript
// Fetch를 사용
fetch('http://52.78.213.9:3000/messages')
	.then (function(response) {
		return response.json();
	})
	.then(function (json) {
		...
});
  
```
Fetch의 등장 이전에는 표준화된 XHR을 사용했다. 그러나 XHR은 Cross-Site 이슈 등의 불편함이 있었고, 그에 비해 Fetch는 간편함, promise 지원 등의 장점을 가지고 있기 때문에 이제는 많은 사람들이 Fetch를 사용한다. 
 
```javascript
// XMLHttpRequest를 사용
var xhr = new XMLHttpRequest();
xhr.open('get', 'http://52.78.213.9:3000/messages');

xhr.onreadystatechange = function(){
	if(xhr.readyState !== 4) return;
	// readyState 4: 완료

	if(xhr.status === 200) {
        // status 200: 성공
		console.log(xhr.responseText); // 서버로부터 온 응답
	} else {
		console.log('에러: ' + xhr.status); // 요청 도중 에러 발생
	}
}

xhr.send(); // 요청 전송
  
```
이 외 Axios와 같은 라이브러리도 존재하고, 경우에 따라 적절한 것을 선택해 사용해야 한다. 

-----
## AJAX의 장단점  
### AJAX의 장점  

- 서버에서 HTML을 완성하여 보내주지 않아도 웹페이지를 만들 수 있다. 이전에는 서버에서 HTML을 완성해 보내줘야 화면에 렌더링을 할 수 있었지만, AJAX를 사용하면 서버에서 완성된 HTML을 보내주지 않아도 필요한 데이터를 비동기적으로 가져와 브라우저에서 화면의 일부만 업데이트하여 렌더링 할 수 있다.  
- 표준화된 방법 이전에는 브라우저마다 다른 방식으로 AJAX를 사용했으나, XHR이 표준화되면서부터 브라우저에 상관없이 AJAX를 사용할 수 있게 되었다.
- 유저 중심 애플리케이션 개발 AJAX를 사용하면 필요한 일부분만 렌더링하기 때문에 빠르고 더 많은 상호작용이 가능한 애플리케이션을 만들 수 있다.  
- AJAX에서는 필요한 데이터를 텍스트 형태(JSON, XML 등)로 보내면 되기 때문에 비교적 데이터의 크기가 작다.  

### AJAX의 단점  

- SEO(Search Engine Optimization)에 불리 AJAX 방식의 웹 애플리케이션은 한 번 받은 HTML을 렌더링 한 후, 서버에서 비동기적으로 필요한 데이터를 가져와 그려낸다. 따라서, 처음 받는 HTML 파일에는 데이터를 채우기 위한 틀만 작성되어 있는 경우가 많다. 검색 사이트에서는 전 세계 사이트를 돌아다니며 각 사이트의 모든 정보를 긁어와, 사용자에게 검색 결과로 보여준다. 그런데 AJAX 방식의 웹 애플리케이션의 HTML 파일은 뼈대만 있고 데이터는 없기 때문에 사이트의 정보를 긁어가기 어렵다.   
- 일반적으로 사용자는 뒤로가기 버튼을 누르면 이전 상태로 돌아갈 거라고 생각하지만, AJAX에서는 이전 상태를 기억하지 않기 때문에 사용자가 의도한 대로 동작하지 않는다. 따라서 뒤로가기 등의 기능을 구현하기 위해서는 별도로 History API를 사용해야 한다.   
