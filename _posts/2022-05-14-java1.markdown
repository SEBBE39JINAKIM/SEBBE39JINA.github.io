---
title: "Java 기초"
layout: post
date: 2022.05.14
headerImage: false
tag:
- Java
- Concept
- Back-end
category: study
author: Jina Kim
---

## Type
### 기본타입과 참조타입
>기본 타입(primitive type): 데이터의 실제 값을 의미.  
참조 타입(reference type): 어떤 값이 저장된 주소 값을 의미.  

**- 기본 타입(primitive type)**  
  정수 타입, 실수 타입, 문자 타입, 논리 타입 
  
**- 참조 타입(reference type)**  
  8개의 기본형을 제외한 나머지 타입  
  
### 정수타입  
메모리 크기에 따라 4가지 타입으로 나누어 짐    

|타입 | 메모리 | 범위
|:----:|:-----:|:----:
|byte|	1byte	|-128(-27) ~ 127(27 - 1)	
|short|	2byte	|-32,768(-215) ~ 32,767(215 - 1)
|int|	4byte|	-2,147,483,648(-231) ~ 2,147,483,647(231 - 1)
|long	|8byte|	-9,223,372,036,854,775,808(-263) ~ 9,223,372,036,854,775,807(263 - 1)


\* int: 정수형의 기본.  


```java
long num1 = 12345678910;// 오류 (int 정수 범위 이탈)
```

```java
long num2 = 12345678910L;// L(long 타입을 의미)을 붙여주면 오류를 해결
```
-> 변수가 범위를 넘을 경우 오버플로우(overflow) / 언더플로우(underflow) 발생.  
>**오버플로우**   
  범위 이상의 값을 표현한 경우 발생   
  ex) byte 형의 최댓값인 127일 경우, 1을 더하면 128이 아니라 -128이다.   
  
**언더플로우**  
  범위 이하의 값을 표현한 경우 발생  
  ex) byte 형의 최솟값인 -128일 경우, 1을 빼면 -129가 아니라 127이다.   

### 실수타입
소수점을 가지는 값을 의미.  
메모리의 크기에 따라 2가지 타입으로 나누어 짐.  

|타입|메모리|
|:---:|:----:|
|float | 4byte|
|double| 8byte|

```java
float num1 = 3.14f;
double num2 = 3.141592d;
double num3 = 3.141592;
```

실수형 값 뒤에는 무슨 타입인지 표현하기 위해 f 또는 d를 붙여야 한다.  
하지만, double형은 실수형의 디폴트 값이기 때문에 생략 가능.  
\* double형은 float형보다 정밀도가 높다.  

### 논리타입  

논리 타입 = boolean(1byte)  

**boolean**  

: 참(true) 또는 거짓(false)을 저장할 수 있는 데이터 타입.  

```java
boolean isEating = true;// 변수를 선언하고 true 값 대입
if(isEating) 
 // 먹는다
```

이때, 조건은 먹거나, 먹지 않거나 두 가지.  
### 문자타입
char (문자): 단 하나의 문자만 저장 가능.   
String (문자열): 여러 문자 저장.  

```java
char letter = 'A'; 
char letter = 'ABC'; // 에러 발생
```

### 타입변환
**- 자동 타입 변환**   
  1. 바이트 크기가 작은 타입에서 큰 타입으로 변환
  2. 덜 정밀한 타입에서 더 정밀한 타입으로 변환 (ex. 정수 → 실수)

```java
byte -> short/char -> int -> long -> float -> double
```
\* float은 4byte인데 int와 long보다 더 정밀하기 때문에 뒤쪽에 존재.  

**- 수동 타입 변환**  
  메모리 용량이 큰 타입에서 작은 타입으로는 변환   
  -> 큰 데이터 타입을 작은 데이터 타입의 변수에 저장 - 캐스팅(casting)   

```java
int a = 128;
byte A = (byte)a;
// 캐스팅 연산자인 ()를 사용, 변환하고자 하는 타입 입력.
System.out.println(A); // -128 
//표현 범위를 넘으면 한 바퀴를 돌아 음수로 출력.
```


-----
## String
String 타입은 큰따옴표("")로 감싸진 문자열 타입.   
String 타입은 문자열이 담겨 있는 주소를 참조.   
char의 배열을 의미.  

```java
String 변수명;
변수명 = "문자열";// String 타입의 선언과 저장(1)

String 변수 = "문자열";// String 타입의 선언과 저장(2)

String 변수 = new String("문자열");// new 연산자 사용 -> 객체 생성, 문자열을 대입
```

**문자열을 변수에 담는 방법**   
  1. 문자열 리터럴을 직접적으로 변수에 대입하는 방법.   
  2. new 연산자를 사용해서 객체를 생성하는 동시에 문자열을 대입하는 방법.    

문자열이 직접 변수에 저장되는 것이 아니라 String의 객체로 생성되어 변수는 이 객체의 주소를 참조하는 것이다.   
-> String 타입 = 참조 자료형  

```java
String fruit1 = "사과";
String fruit2 = "딸기";
String fruit3 = new String("바나나");

System.out.println(fruit1 == fruit2); // true
System.out.println(fruit1 == fruit3); // false
```

문자열 리터럴로 생성하는 것과 new 키워드로 생성하는 것의 차이점.  

-----
## Variable/Constant
### 변수
: 데이터의 저장 공간.  

```java
int A = 23;// A가 변수
```

**변수를 사용하는 이유**  
  1. 메모리에 데이터의 저장 공간을 확보.  
  2. 다른 개발자와 협업 시 변수명을 붙여 소통.  
  3. 데이터를 재사용.  

**변수의 선언과 할당**   
  변수 선언: 데이터를 저장하기 위한 공간을 메모리상에 확보.   
  할당: 선언을 통해 확보한 메모리 공간에 값을 저장.  

```java
int num; // 변수 선언
num = 10;// 값을 할당
int number = 10;// 동시에 선언, 할당 =>'초기화'
```

**\* 연산자(=): 오른쪽의 값을 왼쪽에 저장**   

### 상수
: 변하면 안 되는 수, 고정된 값  

**상수를 사용하는 이유**  
  1. 오타로 인한 에러를 방지
  2. 변경하면 안 되는 값을 보존
  3. 데이터를 재사용

-----
## Operator
### 산술 연산자
사칙연산에 사용되는 연산자(+, -, *, /) + 나머지 연산자(%)  

|연산자|	기능	|예시(int)	|결과값|
|:------:|:------:|:----:|:------:|
|+	|두 항 더하기|2 + 3|5|
|-|	두 항 빼기	|5 - 3|2|
|*|	두 항 곱하기	|3 * 3|9|
|/|	두 항 나누기	|9 / 3|3|
|%|두 항을 나눈 나머지|	8 % 3|2|


### 비교 연산자
대소 비교 연산자(>, <, <=, >=) + 등가 비교 연산자(==, !=)    

**대소 비교 연산자**
  : boolean을 제외한 나머지 기본 타입에 모두 사용   

|대소 비교 연산자|	결과
|:------------:|:---:
|8 > 4	|true
|4 <= 4	|true
|2 > 1	|true
|4 >= 6	|false
**\* 이항 비교만 가능**   
 
**등가 비교 연산자**  
  값이 동등하면 true, 그렇지 않으면 false  

|등가 비교 연산자|	결과|
|:----:|:----:|
|5 == 7	|false|
|3 == 3|true|
|4 != 6|true|
|5 != 5|false|

### 연산자 우선순위

|우선순위	|연산자	|내용
|:-----:|:-----:|:-----:
|1|	(),[]	|괄호  대괄호
|2|	!, ~, ++, --|	부정/ 증감
|3	|*, /, %|	곱셈 / 나눗셈
|4	|<, <=, >, >=	|대소 비교
|5	|&&|	AND
|6	| l l	|OR
|7	|? :	|조건 
|8	|=, +=, -=, /=, %=	|대입/할당

-----
## Input/Output(I/O)
### 콘솔 출력
 System.out.print(), System.out.println(), System.out.printf() 메서드 활용

**System.out.print()**  

: 소괄호 안의 내용을 출력하고, 줄바꿈 안함.  

**System.out.println()**   

: 소괄호 안의 내용을 출력하고 줄바꿈 함.  

**System.out.printf()**  

지시자(specifier, 형식 지정자)를 이용해 변수의 값을 여러 형식으로 출력  
f = formatted의 약자   

```java
System.out.printf("나는 %c %s입니다", '김', "지나");
// -> 나는 김 지나입니다
```

### 콘솔 입력

**import java.util.Scanner;**   

: Scanner를 사용하기 위해 java.util에 있는 Scanner를 이 소스 코드로 가져오는 것.   

**Scanner scanner = new Scanner(System in);**   

: 데이터 입력 기능을 사용하기 위해 Scanner 클래스를 연산자를 통해 객체로 만든 것.  
(클래스를 통해 객체를 만들 때, new 연산자 사용)

**String inputValue = scanner.nextLine();**   

: 문자열을 입력받기 위한 코드, 입력받은 문자열은 inputValue 변수에 할당되어 저장.  

-----
## Control Flow Statements
### 조건문
**- if 문**    

```java
if (조건식 = boolean값으로 평가될 수 있는 조건식) {
	조건식이 참일 때 실행되는 블록
}
```

**- if...else문**   

: if...else문은 조건식의 결과에 따라 실행블록을 선택.  
  if문의 조건식이 true면 해당 블록이 실행.   
  -> 조건식이 false이면 else if 블록을 검사.  
  else if에 해당하는 모든 조건식이 false일 경우 else 블록이 실행.  

```java
if(조건식1) {
	조건식1 = true, 실행
} else if (조건식2) {
	조건식1 = false 조건식2 = true, 실행
} else {
	조건식1, 조건식2 = false, 실행
	//else문 생략 가능
}
```

**- Switch문**   

: switch문은 변수의 값에 따라 실행문 결정.  

```java
switch(변수값) {
	case 변수값:
    	System.out.println(변수값);
		break;
    case 변수값:
    	System.out.println(변수값);
    	break;
    default:
    	System.out.println(변수값);
    	break; 
    }
    
    //case 값 = 입력값, 실행
    //동일한 값을 갖는 case가 없으면 default에서 실행(default는 생략 가능)
    
```

** 주의**  

  break문을 작성하지 않으면 switch문을 탈출하지 않고 모든 case문을 실행.  
  = fall through  
  
### 반복문
**- for문**  

: 조건식이 참인 동안 주어진 횟수만큼 실행문을 반복적으로 수행.   

```java
 int result = 0;
    for(int i = 0 (초기화); i < 10 (조건식); i++ (증감식) ) {	
      result += i;
    }
    System.out.println(result); // => 45(1~9의 합)
    
   //  변수 i 선언, 초깃값=0 대입
	i는 현재 10보다 작으므로, 실행 블록 안의 코드 최초 수행
	실행 블록을 빠져나오면 i는 1 증가
	i = 1, 10보다 작으므로, 실행 블록 안의 코드가 두 번째 수행
	i가 9일때까지 반복
	i가 10이 되면 10보다 작다는 조건을 만족하지 못하므로, for문이 종료.
 
```

>**초기화**  - for문 시작할 때 최초 한 번만 수행, 사용할 변수의 초기값 설정.  
**조건식** - 계속 반복할지 여부 결정.  
**증감식** - 반복 횟수를 결정하는 규칙.   
  ++는 반복문에서 자주 쓰는 증감연산자로, 피연산자 값을 1 증가.  

**- while문**  

: 조건식이 true일 경우에 계속해서 반복.  

```java
int i = 0, result = 0(초기화);
while(i<10 조건식) {
  result += i (실행문); //조건식이 참인 동안 실행
  i++ (증감식);
}
System.out.println(result);
초기화와 증감식은 필요 없으면 생략 가능.
```

**- do-while문**  

```java
do {
  (실행문) //처음 한 번은 무조건 실행
} while(조건식);
```

**- break문**   

: 반복문인 for문, while문, do-while문을 실행 중지할 때 사용.  

\* 반복문이 중첩되어 있을 경우 break문은 가장 가까운 반복문만 종료.  
바깥쪽 반복문에는 영향을 끼치지 않다. 예를 들어 살펴보겠습니다.   

**- continue문**   

: 반복문인 for문, while문, do-while문에서만 사용.  
  continue문과 break문의 차이점은 반복문의 종료 여부   
  -> continue문은 반복문을 종료하지 않고 계속 반복 수행   

-----
## Array
### 1차원 배열
배열이 가진 각각의 값 = 요소 또는 원소   
배열에서 요소 순서 번호표 = 인덱스   
**\* 인덱스의 맨 처음 요소는 0(0부터 시작)**  

**배열의 선언과 초기화**   

```java
int[] arr;
int arr[];
// 크기 할당 & 초기화 없이 선언하는 경우
```

```java
int[] arr1 = new int[3]; // arr -> {0, 0, 0}
// 선언과 동시에 초기화
// 값을 지정하지 않으면 각 요소는 해당 타입의 기본값으로 채워진다.

```

```java
int[] arr;
arr = new int[3]; // arr -> {0, 0, 0}
// 선언 후 초기화 
```

```java
int[] arr = {1, 2, 3};
int[] arr = new int[] {1, 2, 3}; // arr -> {1, 2, 3}
// 선언과 동시에 값을 넣어 초기화
```

**배열의 길이와 인덱스**   
  배열이름.length = 배열의 길이   

```java
int[] arr = new int[4];
System.out.printf("%d", arr.length); // 4
```

배열의 길이 = 배열의 마지막 요소 + 1   
-> 인덱스는 0부터 시작   

### 다차원 배열
**2차원 배열**   
  2차원 배열이란 배열 안에 배열이 중첩된 배열을 의미.  

**2차원 배열 선언과 초기화**   

```java
int[][] arr;
// 크기 할당 및 초기화 없이 선언만 하는 경우
```

```java
int[][][] arr;
// 3차원 배열을 선언하는 경우
//다차원 배열을 만들때는 [] 추가
```

```java
int[][] arr = new int[2][3] 
// 선언과 동시에 배열의 크기를 지정한 경우
```

```java
int[][] arr;
arr = new int[2][3]; 
// 선언된 배열에 크기를 지정해서 초기화 하는 경우
```

<!--{%raw%}-->
```java
int[][] arr = {{1, 2, 3}, {4, 5, 6}}; // new int[][] 생략 가능
int[][] arr = new int[][] {{1, 2, 3}, {4, 5, 6}}; 
{  
   {1, 2, 3},
   {4, 5, 6}  
}
// 선언과 동시에 값을 넣어 초기화하는 경우 
```
<!--{%endraw%}-->

### 가변 배열

```java
int[][] arr = new int[10][];
// 선언과 초기화는 경우
// 첫번째 배열에 10 크기를 초기화, 안에 배열은 초기화시키지 않고 담을 공간만 만들었다.
```

빈 공간에는 원하는 크기만큼 값을 저장   
-> new 키워드로 공간을 만들어 메모리가 비율효율적로 사용되는 것을 방지.  
### 문자열 배열
**문자열 배열의 선언 및 초기화**    
  2차원 문자열 배열   

```java
char[][] letters = new char[3][];
letters[0] = new char[2];
letters[1] = new char[4];
letters[2] = new char[5];

letters[0][0] = 'M';
letters[0][1] = 'Y';

letters[1][0] = 'J';
letters[1][1] = 'A';
letters[1][2] = 'V';
letters[1][3] = 'A';

letters[2][0] = 'S';
letters[2][1] = 'T';
letters[2][2] = 'U';
letters[2][3] = 'D';
letters[2][4] = 'Y';
// 가변 배열로 2차원 배열 선언 = 가능하지만 *비효율적*
```

```java
String[] str = new String[3];
str[0] = "MY";
str[1] = "JAVA";
str[2] = "STUDY";
// 선언 후 각 배열에 값을 넣어 초기화하는 경우
```

```java
String[] str = new String[] {"MY", "JAVA", "STUDY"};
String[] str = {"MY", "JAVA", "STUDY"}; // new String[] 생략 가능
// 선언과 동시에 값을 넣어 초기화하는 경우
```

**주의 사항**   
  - Character(문자) = (‘’), String(문자열) = (“”)
  - 문자를 담을 변수 선언 = char 타입
  - 문자열을 담을 변수를 선언 = String 타입
### 배열 탐색
**- 배열의 인덱스(Index)**   
  배열을 생성시 각 저장 공간을 배열의 요소(Element)라고 한다.   
  요소에 접근하기 위해서는 인덱스를 사용한다.   
  (인덱스의 시작 = 0)   
**- 배열의 길이**   
  변수명.length = 배열의 길이   
  배열의 최대 인덱스 = 배열의 길이 -1 

```java
int[] arr = {1, 2, 3, 4};
System.out.println(arr[2]); // 숫자 3이 출력
```

```java
int[] arr = {1, 2, 3, 4};
System.out.println(arr.length); // 숫자 4가 출력
```

\* 문자열의 길이는 length() 메서드 사용.   

```java
String str = "Java Study";
System.out.println(str.length()); // 숫자 10 출력
```

<!--{%raw%}-->
```java
int[][] arr = {{1, 2}, {3, 4, 5}};
System.out.printfln(arr.length);    // 숫자 2 출력
System.out.printfln(arr[0].length); // 숫자 2 출력
System.out.printfln(arr[1].length); // 숫자 3 출력
// 2차원 배열의 경우
```
<!--{%endraw%}-->

```java
int[] arr = new int[0];
// 길이가 0인 경우, 어떤 요소도 배열에 넣을 수 없다.
```

**반복문을 통한 배열 탐색**   
  - for 문   

```java
int[] arr = {1, 2, 3, 4, 5, 6, 7};

for(int i = 0; i < arr.length; i++){
	System.out.println(arr[i]);
}
```

- for each문   
 
```java
int[] arr = {1, 2, 3, 4, 5, 6, 7};

for (int result: arr) {
	System.out.println(result);
}
```

\* for each문   
: 조건식과 증감식을 가지지 않는다(자동으로 처음부터 끝까지 순회)   

for문 = 배열의 각 요소에 접근하여 값을 읽고, 값을 재할당하는 것 가능   
for each문 = 값을 읽어오는 것만 가능    

```java
int[] arr = {1, 2, 3, 4, 5, 6, 7};
for (int i = 0; i < arr.length; i++) {
	arr[i] += 1;
}
for (int i = 0; i < arr.length; i++) {
	System.out.printf("%d", arr[i]);
} // arr 출력 결과 : {2, 3, 4, 5, 6, 7, 8} = 재할당 가능

```

```java
int[] arr = {1, 2, 3, 4, 5, 6, 7};
for (int num: arr) {
	num += 1;
}
for (int num: arr) {
	System.out.printf("%d", num);
} // arr 출력 결과 : {1, 2, 3, 4, 5, 6, 7} = 재할당 불가능
```
