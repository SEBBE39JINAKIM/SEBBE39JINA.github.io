---
title: "OPP 기초"
layout: post
date: 2022.05.15
headerImage: false
tag:
- OPP
- Concept
- Back-end
category: study
author: Jina Kim
---

>객체지향 프로그래밍(OOP, Object Oriented Programming)  
프로그램 개발 및 유지 보수 비용 절감.
객체를 통해 데이터를 관리해서 데이터를 손실 없이 관리하기 용이.

------
## Class / Object
### 클래스(Class)  
: 객체를 생성하는데 사용하는 설계도.  
(클래스 ≠ 객체)  

ex) 아파트 설계도 = 클래스 / 아파트 = 객체  
아파트 설계도가 먼저 정의되고, 설계도를 통해 아파트들을 만든다.   
클래스를 통해 생성된 객체를 해당 클래스의 인스턴스라 부른다.   

**클래스의 구성요소와 기본 문법**  
클래스명은 주로 대문자로 시작하는 것이 관례  

```java
class 클래스명 {
		클래스 정의
    }
```

**클래스의 구성요소**  
필드(field)    
메서드(method)    
생성자(constructor)    
이너 클래스(inner class)    

```java
public class Example {
	int a = 10; // (1)필드
	void printA() {...} // (2)메서드
	Example {...} // (3)생성자
	class Example2 {...} // (4)이너 클래스
} 
```

필드 - 클래스의 속성을 나타내는 변수.     
ex) 이름, 색상, 개수 등  

메서드 - 클래스의 기능을 나타내는 함수.  
ex) 밥먹기, 일하기, 세수하기 등  

생성자 - 클래스의 객체를 생성하는 역할.   

이너 클래스 - 클래스 내부의 클래스를 의미.  


\* 클래스의 멤버(member): 필드, 메서드, 이너 클래스  

### 객체(Object) 
객체 ≒ 인스턴스  
**구성요소**   
속성: 필드   
기능: 메서드   

**객체의 생성**  
객체는 new 키워드로 생성.  

```java
클래스명 참조변수명; // 참조변수 선언 
참조변수명 = new 생성자(); // 인스턴스 생성, 참조변수에 할당
```

**참조 변수는 실제 데이터 값이 아니라 데이터가 저장되어 있는 힙 메모리의 주소값.**  

```java
클래스명 참조_변수명 = new 생성자(); // 인스턴스 선언
```

**객체의 활용**  

**포인트 연산자( . )**  
	의미 - 해당 위치에 있는 객체 안을 보시오  
    . 을 활용하여 특정 인스턴스 객체의 필드와 메서드에 접근  

 ```java
참조 변수명.필드명 // 필드값 불러오기
 참조 변수명.메서드명() // 메서드 불러오기
```
**예시**

```java
public class LunchTest {
    public static void main(String[] args) {
        Lunch lunch = new Lunch("백반", "12"); // 객체 생성. 

        System.out.println("오늘 점심은" + lunch.menu + "이고 " + "점심 시간은 " + lunch.time + "시 입니다."); // 필드 호출
        lunch.menu(); // 메서드 호출
        lunch.time();
    }
}

class Lunch {
    public String menu; // 필드 선언
    public int time;

    public Lunch(String menu, int time) { // 인스턴스 초기화를 위한 생성자 함수
        this.menu = menu;
        this.time = time;
    }

    void preparation() { // 메서드 선언
        System.out.println("손을 씻습니다.");
    }
}

// 출력값
오늘 점심은 백반이고 점심 시간은 12시 입니다.
손을 씻습니다.
```

-----
## Field / Method
### 필드(Field)  
클래스에 포함된 변수를 의미, 객체의 속성을 정의할 때 사용  

> 클래스 변수(cv, class variable) - 필드(static 키워드 존재)  
인스턴스 변수(iv, instance variable) - 필드(static 키워드 X)  
지역 변수(lv, local variable) - 필드 X(앞에 두 변수 외 전부)

```java
class Example { // 클래스 영역  
	int instance; // 인스턴스 변수  
	static int class; // 클래스 변수(static 변수, 공유변수)  

	void method() { // 메서드 영역  
		int local = 0; // 지역 변수
	}
}
```

**인스턴스 변수(iv)**  
	: 인스턴스가 가지는 각각의 고유한 속성을 저장하기 위한 변수.  
	new 생성자() 를 통해 인스턴스가 생성될 때 만들어진다.  

**클래스 변수(cv)**  
	: 독립적인 저장 공간을 가지는 인스턴스 변수와 달리 공통된 저장공간을 공유.   
    한 클래스에서 생성되는 모든 인스턴스가 특정 값을 공유하는 경우, static 키워드를 사용.  
	인스턴스 변수와 달리 **클래스명.클래스변수명** 을 통해 사용 가능.   

**지역 변수(lv)**   
	멤버 변수와 달리 스택 메모리에 저장되어 메서드가 종료되면 함께 소멸  
	스택 메모리에 저장된 지역변수는 한동안 사용하지 않는 경우 자동 삭제  

**필드변수와 지역변수 차이점**    
	필드변수 - 직접적으로 초기화를 실행하지 않아도 강제로 초기화  
	(힙 메모리에 빈 공간이 저장될 수 없기 때문)  
	지역변수 - 직접 초기화하지 않으면 값을 출력할 때에 오류 발생  

**static 키워드**  
	: 클래스 멤버(필드, 메서드, 이너 클래스)에 사용하는 키워드  
    static으로 정의된 클래스 멤버는 인스턴스의 생성 없이 **클래스명.멤버명** 으로 사용 가능   
    클래스 메서드에서 인스턴스 변수는 접근 불가(클래스 변수는 가능)  
    static 변수는 모든 객체가 하나로 통일(모든 객체가 영향을 받음)  
    인스터턴스 변수는 선택한 그 객체에만 영향을 받음  
        
### 메서드(Method)  
: 특정 작업을 수행하는 일련의 명령문들의 집합을 의미  
메서드 시그니처(method signature)와 메서드 바디(method body)로 구분  

```java
public static int num(int x, int y) { // 메서드 시그니처
	int result = x + y; // 메서드 바디
	return result;
}
```
\* 만약 반환타입이 void가 아닌 경우, 메서드 바디안에 반드시 return 문 존재. 

**메서드의 시그니처**  
	: 해당 메서드가 어떤 타입을 반환하는지(반환 타입), 메서드 이름(메서드명), 해당 작업을 수행하기 위해 어떤 게 필요하는 지(매개 변수) 정보 포함.     
**메서드의 바디**  
	: {} 안에 해당 메서드가 호출되었을 때 수행되어야하는 작업들을 표시  
    참고로 메서드명은 관례적으로 소문자로 표시  


**메서드의 호출**  

클래스 외부에서 메서드를 사용하기 위해 인스턴스를 생성  
-> 포인트 연산자(.)를 통해 메서드를 호출  
(클래스 내부에 있는 메서드끼리는 따로 객체를 생성하지 않고 호출 가능)

인자(argument) = 메서드 호출 시 괄호() 안에 입력 값  
인자의 개수와 순서는 반드시 선언된 매개변수와 일치되어야 한다.

**메서드 오버로딩(Method Overloading)**  
	: 하나의 클래스 안에 같은 이름의 메서드를 여러 개 정의하는 것.  

```java
public class Overloading {
    public static void main(String[] args) {
        Fruit f= new Friut(); // 객체 생성
 
        f.area(); // 메서드 호출
        f.area(5);
        f.area(3,10);
    }
}

class Fruit {
    public void area() { // 메서드 오버로딩. 같은 이름의 메서드
        System.out.println("count");
    }
    public void area(int a) {
        System.out.println("banana = " + a);
    }

    public void area(int b, int c) {
        System.out.println("berry = " + b + c);
    }
}
// 출력값
count 
banana = 5
berry = 13
```

Fruit 클래스 안에 모든 메서드가 같은 이름(area())을 가지고 있지만 다른 값을 리턴.  

**메서드 오버로딩이 성립 조건**  
같은 이름의 메서드명 사용  
매개변수의 개수나 타입이 다르게 정의  

**오버로딩의 장점**  

하나의 메서드로 여러 경우의 수를 해결.  
대표적인 예) println() 메서드.

-----
## Constructor
### 생성자(Constructor)

: 클래스의 구성 요소, 인스턴스 생성시 호출되는 인스턴스 초기화 메서드.  
new 키워드를 사용하여 객체를 생성할 때에 호출되는 것  

생성자가 인스턴스를 생성하는 역할을 한다. (X)  
인스턴스 생성 담당은 new 키워드이다.  
-> 생성자는 인스턴스 변수들을 초기화하는 데 사용되는 특수한 메서드  

**생성자와 메서드의 차이**  
1. 생성자의 이름은 반드시 클래스의 이름과 같아야 한다. 
2. 생성자는 리턴 타입이 없다.(리턴 값이 없을 때 표시하는 void 사용 안함)  

**기본 생성자(Default Constructor)**  
모든 클래스에는 반드시 하나 이상의 생성자가 존재해야 한다.  
(자바 컴파일러가 자동 생성)  
기본생성자 = 매개변수가 없는 생성자  

```
클래스명(){} //기본 생성자
```

**### 매개변수가 있는 생성자**  
매개변수를 통해 호출 시에 해당 값을 받아 인스턴스를 초기화하는 데 사용  
매개변수가 있는 생성자를 사용할 때 인스턴스의 필드값을 일일이 설정해줄 필요없이 생성과 동시에 원하는 값으로 설정 가능  

### this / this()
**this()**  
	: 자신이 속한 클래스에서 다른 생성자를 호출하는 경우에 사용.  
	ex) Num 클래스의 생성자를 호출을 Num()가 아니라 this()로 가능  
	그 효과는 Num() 생성자를 호출하는 것과 동일.  

**문법요소**  
1. this() 메서드는 반드시 생성자의 내부에서만 사용할 수 있다.  
2. this() 메서드는 반드시 생성자의 첫 줄에 위치해야 한다.  

```java
public class Test {
    public static void main(String[] args) {
        Number num1 = new Number();
        Number num2 = new Number(4);
    }
}

class Number  {
    public Number() {
        System.out.println("Number은 숫자!");
    };

    public Number(int a) {
        this();
        System.out.println("Number은 숫자입니다!");
    }
}

//출력값
Number은 숫자!
Numbe은 숫자!
Number은 숫자입니다!
```

**this 키워드**  
인스턴스 변수와 매개변수의 이름이 같을 때 구분하기 위해 사용  

this는 인스턴스 자신을 가리키며, this를 통해 인스턴스 자신의 변수에 접근할 수 있는 것  
-> this 키워드는 인스턴스의 필드명과 지역변수를 구분하기 위한 용도로 사용
