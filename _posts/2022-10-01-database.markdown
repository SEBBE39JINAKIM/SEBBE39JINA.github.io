---
title: "관계형 데이터베이스"
layout: post
date: 2022.10.01
headerImage: false
tag:
- Database
- Concept
- Back-end
category: study
author: Jina Kim
---

## SQL  
### SQL 소개  

**데이터베이스의 필요성**  
데이터를 저장하는 방법으로 파일에 데이터를 저장하거나, 인메모리 형태로 데이터를 임시 저장하는 방법이 있다. 이 방법으로도 데이터를 저장할 수 있는데, 데이터베이스를 사용하는 이유를 알아보자.   

**1. In-Memory**  
JavaScript에서 데이터를 다룰 때, 프로그램이 실행될 때에만 존재하는 데이터가 있다.  
JavaScript에서 변수를 만들어 저장한 경우, 프로그램이 종료될 때 해당 프로그램이 사용하던 데이터도 사라진다. 이 뜻은 변수 등에 저장한 데이터가 프로그램의 실행에 의존한다는 말이다. 예기치 못한 상황으로부터 데이터를 보호할 수 없고, 프로그램이 종료된 상태라면 데이터를 원하는 시간에 받아올 수 없으며, 데이터의 수명이 프로그램의 수명에 의존하게 된다.  

**2. File I/O**  
파일을 읽는 방식으로 작동하는 형태를 말한다. 엑셀 시트나 CSV 같은 파일의 형태는 In-Memory에 비해 데이터를 저장하는 방식으로 적절해 보인다. 그러나 데이터가 필요할 때마다 전체 파일을 매번 읽어야 하는 한계가 있다. 파일의 크기가 커질수록 이 작업은 버겁고, 비효율적이어서 File I/O 방식의 큰 단점이다. 파일이 손상되거나 여러 개의 파일들을 동시에 다뤄야 하거나 하는 등 복잡하고 데이터량이 많아질수록 데이터를 불러들이는 작업이 점점 힘들어 진다.
반면, 관계형 데이터베이스에서는 하나의 CSV 파일이나 엑셀 시트를 한 개의 테이블로 저장할 수 있다. 한번에 여러 개의 테이블을 가질 수 있기 때문에 SQL 을 활용해 데이터를 불러오기 수월하다. 또한, 엑셀 시트와 CSV 파일 등 처럼 특정 형태의 파일은 대용량의 데이터를 저장하기 위한 목적이 아니다.


**SQL 소개**  

**Structured Query Language(SQL)** 는 데이터베이스 언어로 구조화된 쿼리 언어이다. 주로 관계형 데이터베이스(MySQL, Oracle, SQLite, PostgreSQL 등)에서 사용한다.  

>**쿼리(query)**
쿼리는 '질의문' 이라는 뜻을 가지고 있다. 예를 들면 검색을 할 때 입력하는 검색어가 일종의 쿼리이다. 검색을 할 때, 기존에 존재하는 데이터를 검색어로 필터링한다. 따라서, 쿼리는 저장되어 있는 데이터를 필터하기 위한 질의문으로도 볼 수 있다.  

SQL은 데이터베이스에 쿼리를 보내 원하는 데이터를 가져오거나 삽입할 수 있다. 그리고 이름에서 유추할 수 있듯이, SQL은 (relation 이라고도 불리는) 데이터가 구조화된(structured) 테이블을 사용하는 데이터베이스에서 활용할 수 있다. 

데이터의 구조가 고정되어 있지 않은 데이터베이스는 NoSQL이라고 한다. 관계형 데이터베이스와 달리, 테이블을 사용하지 않고 데이터를 다른 형태로 저장한다. NoSQL의 대표적인 예는 MongoDB와 같은 문서 지향 데이터베이스가 있다.  

### SQL 명령문   

|SQL 기본 문법|간단 설명|SQL 기본 문법|간단 설명
|:----:|:----:|:----:|:----:|
|Insert Into|CRUD 중 Create|Select|CRUD 중 Read|
|Update|CRUD 중 Update|Delete|CRUD 중 Delete|
|Where|특정 조건에 부합하는 데이터만 조회할 때 사용. where+조건문|And, Or, Not|여러개의 조건을 함께 사용 가능. 논리 연산자|
|Order By|정렬된 데이터 불러오기.SELECT문 마지막에 위치. ASC-오름차순, DESC-내림차순|Null Values|Null은 기본 연산자 사용이 안됨. IS NULL, IS NOT NULL 연산자 사용.|
|Count|지정된 기준과 일치하는 행의 수를 반환. 집계 함수.|Like| 지정된 패턴을 검색할때 사용, 특정 키워드 검색에 사용.|
|Wildcards|문자열의 다른 문자를 대체하는 데 사용. LIKE 연산자와 함께 사용 되며, %, &#95;(?)을 사용.|Alias|테이블 이름이나 열 이름의 별칭 지정.  AS를 사용하지만, 띄어쓰기로도 별칭 지정 가능. 
|Joins|테이블 사이의 공통 필드를 기반으로, 두 개 이상의 테이블을 연결.|Inner Join|기준 테이블과 조인 테이블 모두 조인 컬럼 데이터가 존재해야 조회 가능|
|Left Join|왼쪽 테이블을 기준으로 일치하는 행만 결합되고, 일치하지 않는 부분은 null 값으로 채워짐.|Right Join|오른쪽 테이블을 기준으로 일치하는 행만 결합되고, 일치하지 않는 부분은 null 값으로 채워짐.|
|Group By|특정 컬럼을 그룹화.|HAVING|특정 컬럼을 그룹화한 결과에 조건을 검.|
  
![](https://velog.velcdn.com/images/wlsk124/post/8e8e1a05-1557-4bb1-bd4a-6d317f0cddb8/image.png)   

**- SELECT**  
- SELECT는 데이터셋에 포함될 특성을 특정한다.  

```sql
-- 일반 문자열
SELECT 'hello world' 
```

```sql
-- 숫자
SELECT 2
```

```sql
-- 간단한 연산
SELECT 15 + 3
```

**- FROM**  
- 테이블과 관련한 작업을 할 경우 반드시 입력. FROM 뒤에 결과를 도출해낼 데이터베이스 테이블을 명시한다.  

```sql
-- 특정 특성을 테이블에서 사용
SELECT 특성_1
FROM 테이블_이름
```

```sql
-- 몇 가지의 특성을 테이블에서 사용
SELECT 특성_1, 특성_2
FROM 테이블_이름
```

```sql
-- 테이블의 모든 특성을 선택
SELECT *
FROM 테이블_이름
```  
***는 와일드카드 (wildcard)로 전부 선택할 때 사용.**   

**- WHERE**  
- 필터 역할을 하는 쿼리문. WHERE은 선택적으로 사용 가능.  

```sql
-- 특정 값과 동일한 데이터 찾기
SELECT 특성_1, 특성_2
FROM 테이블_이름
WHERE 특성_1 = "특정 값"
```

```sql
-- 특정 값을 제외한 값을 찾기
SELECT 특성_1, 특성_2
FROM 테이블_이름
WHERE 특성_2 <> "특정 값"
```

```sql
-- 특정 값과 크기 비교를 하는 데이터를 필터할 때 '<', '>', '<=', '>=' 사용.
SELECT 특성_1, 특성_2
FROM 테이블_이름
WHERE 특성_1 > "특정 값"

SELECT 특성_1, 특성_2
FROM 테이블_이름
WHERE 특성_1 <= "특정 값"
```

```sql
-- 문자열에서 특정 값과 비슷한 값들을 필터할 때 'LIKE'와 '\%' 혹은 '\*' 사용.
SELECT 특성_1, 특성_2
FROM 테이블_이름
WHERE 특성_2 LIKE "%특정 문자열%"
```

```sql
-- 리스트의 값들과 일치하는 데이터를 필터할 때 'IN'을 사용.
SELECT 특성_1, 특성_2
FROM 테이블_이름
WHERE 특성_2 IN ("특정값_1", "특정값_2")
```

```sql
-- 값이 없는 경우 'NULL'을 찾을 때 'IS'를 같이 사용.
SELECT *
FROM 테이블_이름
WHERE 특성_1 IS NULL
```

```sql
-- 값이 없는 경우를 제외할 때 'NOT'을 추가.
SELECT *
FROM 테이블_이름
WHERE 특성_1 IS NOT NULL
```

**- ORDER BY**   
- 돌려받는 데이터 결과를 어떤 기준으로 정렬하여 출력할지 결정한다.  
ORDER BY는 선택적으로 사용할 수 있다.  

```sql
-- 기본 정렬은 오름차순입니다.
SELECT *
FROM 테이블_이름
ORDER BY 특성_1
```

```sql
-- 내림차순으로도 정렬할 수 있습니다.
SELECT *
FROM 테이블_이름
ORDER BY 특성_1 DESC
```

**- LIMIT**  
- 결과로 출력할 데이터의 갯수를 정할 수 있다. LIMIT은 선택적으로 사용할 수 있고, 쿼리문에서 사용할 때 가장 마지막에 추가한다.  


```sql
-- 데이터 결과를 200개만 출력.
SELECT *
FROM 테이블_이름
LIMIT 200
```

**- DISTINCT**  
- 유니크한 값을 받고 싶을 때, SELECT DISTINCT를 사용할 수 있다.  

```sql
-- 특성_1을 기준으로 유니크한 값들만 선택.
SELECT DISTINCT 특성_1
FROM 테이블_이름
```

```sql
-- 특성_1, 특성_2, 특성_3의 유니크한 '조합' 값들을 선택.
SELECT
  DISTINCT
    특성_1
    ,특성_2
    ,특성_3
FROM 테이블_이름
```

**- INNER JOIN**  
- INNER JOIN이나 JOIN으로 실행할 수 있다.  

```sql
-- 둘 이상의 테이블을 서로 공통된 부분을 기준으로 연결한다.
SELECT *
FROM 테이블_1
JOIN 테이블_2 ON 테이블_1.특성_A = 테이블_2.특성_B
```

**- OUTER JOIN**  
- Outer JOIN은 선택지가 다양하다.  

```sql
-- 'LEFT OUTER JOIN'으로 LEFT INCLUSIVE을 실행.
SELECT *
FROM 테이블_1
LEFT OUTER JOIN 테이블_2 ON 테이블_1.특성_A = 테이블_2.특성_B
```

```sql
-- 'RIGHT OUTER JOIN'으로 RIGHT INCLUSIVE을 실행.
SELECT *
FROM 테이블_1
RIGHT OUTER JOIN 테이블_2 ON 테이블_1.특성_A = 테이블_2.특성_B
```

**- 여러 쿼리문을 한 번에 써보기**  
>한국(Korea)에서 온 고객을 도시별로 묶은 뒤에, 각 도시 수에 따라 내림차순 정렬하고, CustomerId에 따라 오름차순으로 정렬한 5개의 결과만 요청하기.

```sql
SELECT c.CustomerId, c.FirstName, count(c.City) as 'City Count'
FROM customers AS c
JOIN employees AS e ON c.SupportRepId = e.EmployeeId
WHERE c.Country = 'Korea'
GROUP BY c.City
ORDER BY 3 DESC, c.CustomerId ASC
LIMIT 5
```

### 데이터베이스 관련 용어  

|||
|:--:|:---:|
|SQL Create DB|SQL Drop DB
|SQL Create Table|SQL Drop Table
|SQL Alter Table|SQL Not Null
|SQL Unique|SQL Default
|SQL Primary Key|SQL Foreign Key
|SQL Auto Increment|SQL Dates

**- 데이터베이스 생성**  

```sql
CREATE DATABASE 데이터베이스_이름;
```

**- 데이터베이스 선택**  
- 테이블을 이용한 작업을 하려면 먼저 사용할 데이터베이스를 선택해야 한다.   
```sql
USE 데이터베이스_이름;
```

**- 테이블 생성**    
테이블은 필드(표의 열)와 함께 만들어야 한다. 다음 필드 조건에 따른 user 테이블 생성.   

|필드 이름|	필드 타입|그 외의 속성|
|:--:|:--:|:---:|
|id|숫자|Primary key, 자동으로 증가되도록 설정
|name|문자열 (최대 255개의 문자)|	
|email|문자열 (최대 255개의 문자)|	

```sql
CREATE TABLE user (
  id int PRIMARY KEY AUTO_INCREMENT,
  name varchar(255),
  email varchar(255)
);
```

SQL 콘솔에서 Enter 키를 이용해 여러 줄의 코드를 입력할 수 있다.  

**- 테이블 정보 확인**   
- 다음의 명령어를 통해 user 테이블의 정보를 확인.   

```sql
DESCRIBE user;
```

```sql
mysql> describe user;
+-------+--------------+------+-----+---------+----------------+
| Field | Type         | Null | Key | Default | Extra          |
+-------+--------------+------+-----+---------+----------------+
| id    | int          | NO   | PRI | NULL    | auto_increment |
| name  | varchar(255) | YES  |     | NULL    |                |
| email | varchar(255) | YES  |     | NULL    |                |
+-------+--------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)
```

### ACID  

**트랜잭션**  

여러 개의 작업을 하나로 묶은 실행 유닛. 각 트랜잭션은 하나의 특정 작업으로 시작해 묶여 있는 모든 작업들을 다 완료해야 정상적으로 종료한다. 만약 하나의 트랜잭션에 속해있는 여러 작업 중에서 하나의 작업이라도 실패하면, 이 트랜잭션에 속한 모든 작업을 실패한 것으로 판단한다. 다시 말해 작업이 하나라도 실패를 하게 되면 트랜잭션은 실패이고, 모든 작업이 성공하면 트랜잭션 또한 성공이다. 성공 또는 실패 라는 두 개의 결과만 존재하는 트랜잭션은, 미완료된 작업없이 모든 작업을 성공해야 한다.  

데이터베이스 트랜잭션은 ACID라는 특성을 가지고 있다.  

>**ACID**
데이터베이스 내에서 일어나는 하나의 트랜잭션(transaction)의 안전성을 보장하기 위해 필요한 성질.   
- Atomicity (원자성)   
- Consistency (일관성)  
- Isolation (격리성, 고립성)  
- Durability (지속성)  


**- Atomicity(원자성)**  
원자성은 하나의 트랜잭션에 속해있는 모든 작업이 전부 성공하거나 전부 실패해서 결과를 예측할 수 있어야 한다. 하나의 단위로 묶여있는 여러 작업이 부분적으로 실행된다면, 업데이트를 했지만 누가 업데이트했는지 모르거나, 업데이트 날짜가 누락되는 등 데이터가 오염될 수 있다. 따라서 하나의 단위로 묶여있는 모든 작업이 실패하게 만들어 기존 데이터를 보호해야한다.  

>**ex) 계좌이체를 할 때 2가지 과정**  
A 계좌에서 출금 -> B 계좌에 입금   
>
계좌이체를 하는데 A 계좌에서는 출금이 이뤄지고, B 계좌에 입금되지 않았다. 이때 어디서 문제가 발생했는지 파악할 수 없으면, A 계좌에서 출금된 돈은 사라진 돈이 된다. 만약 은행에서 이런 일이 발생하면, 은행은 더이상 제 기능을 할 수 없다. A 계좌에서 출금하는 일에 성공했지만, B 계좌에 입금하는 작업에 실패한다면 계좌 A에서 출금하는 작업을 포함해 모든 작업이 실패로 돌아가야 한다는 것이 **Atomicity(원자성)** 이다.    

SQL에서도 특정 쿼리를 실행했는데 부분적으로 실패한 부분이 있으면, 전부 실패하도록 구현되어 있다. 충돌 요인에 대해 선택지를 제공하기도 한다.  

**- Consistency(일관성)**  
두 번째는 데이터베이스의 상태가 일관되어야 한다. 하나의 트랜잭션 이전과 이후, 데이터베이스의 상태는 이전과 같이 유효해야 한다. 다시 말해, 트랜잭션이 일어난 이후의 데이터베이스는 데이터베이스의 제약이나 규칙을 만족해야 한다는 뜻이다.  

>**ex) 데이터베이스의 제약: '모든 고객은 반드시 이름이 있어야 한다'**  
Consistency(일관성)를 위반하는 트랜잭션  
>
- 이름 없는 새로운 고객을 추가하는 쿼리  
- 기존 고객의 이름을 삭제하는 쿼리  
>
데이터베이스의 유효한 상태는 다를 수 있지만, 데이터의 상태에 대한 일관성은 변하지 않아야 한다. 위 예시는 '이름이 있어야 한다' 라는 제약을 위반한다. 따라서 예시 트랜잭션이 일어난 이후의 데이터베이스는 일관되지 않는 상태를 가진다.  

**- Isolation(격리성, 고립성)**   
모든 트랜잭션은 다른 트랜잭션으로부터 독립되어야 한다. 실제로 동시에 여러 개의 트랜잭션들이 수행될 때, 각 트랜젝션은 고립(격리)되어 있어 연속으로 실행된 것과 동일한 결과를 나타낸다.  

>**ex) 내 계좌에 만 원이 있고, 총 만 2천 원을 이체 할 경우**  
>
내 계좌에서 A계좌로 6천 원을, B계좌로 6천 원을 동시에 계좌 이체하는 경우, 계좌 A에 먼저 송금한 뒤, 계좌 B에 보내는 결과와 동일해야 한다.
동시에 트랜잭션을 실행한다고 해서 계좌 A와 B에 각각 6천 원씩 송금하여 마이너스 통장이 되는 건 아니다. 각각의 송금 작업을 연속으로 실행하는 것과 동일한 결과가 나타나야 한다. 격리성을 지키는 각 트랜젝션은 철저히 독립적이기 때문에, 다른 트랜젝션의 작업 내용을 알 수 없다. 그리고 트랜잭션이 동시에 실행될 때와 연속으로 실행될 때의 데이터베이스 상태가 동일해야 한다.  

**- Durability(지속성)**  
하나의 트랜잭션이 성공적으로 수행되었다면, 해당 트랜잭션에 대한 로그가 남아야 한다. 만약 런타임 오류나 시스템 오류가 발생하더라도, 해당 기록은 영구적이어야 한다는 뜻이다.  

>**ex) 게좌이체를 성공적으로 한 뒤, 해당 은행 데이터베이스에 오류가 발생해도 계좌이체 내역은 기록으로 남아야 한다.**
>
또한, 계좌이체를 로그로 기록하기 전에 시스템 오류 등에 의해 종료가 된다면, 해당 이체 내역은 실패로 돌아가고 각 계좌들은 계좌이체 이전 상태들로 돌아가게 된다.  

### SQL(구조화 쿼리 언어) vs. NoSQL(비구조화 쿼리 언어)  

데이터베이스는 크게 관계형 데이터베이스와 비관계형 데이터베이스로 구분한다. 관계형 데이터베이스는 SQL을 기반으로 하고, 비관계형 데이터베이스는 NoSQL로 데이터를 다룬다. SQL과 NoSQL은 만들어진 방식, 저장하는 정보의 종류, 그리고 저장하는 방법 등에 차이가 있다.  

**관계형 데이터베이스(SQL)**
관계형 데이터베이스에서는 테이블의 구조와 데이터 타입 등을 사전에 정의하고, 테이블에 정의된 내용에 알맞은 형태의 데이터만 삽입할 수 있고, 행(row)과 열(column)로 구성된 테이블에 데이터를 저장한다. 각 열은 하나의 속성에 대한 정보를 저장하고, 행은 각 열의 데이터 형식에 맞는 데이터가 저장된다. 특정한 형식을 지키기 때문에, 데이터를 정확히 입력하면 데이터를 사용할 때 매우 수월하다. 또한 SQL을 활용해 원하는 정보를 쿼리할 수 있다. (-> 스키마가 뚜렷하게 보인다.) 따라서, 관계형 데이터베이스에서는 테이블 간의 관계를 직관적으로 파악할 수 있다.  

**- 대표적인 관계형 데이터베이스**   
MySQL, Oracle, SQLite, PostgresSQL, MariaDB 등  

**비관계형 데이터베이스(NoSQL)**  
주로 데이터가 고정되어 있지 않은 데이터베이스를 가르킨다. NoSQL에 스키마가 반드시 없는 것은 아니라 관계형 데이터베이스에서는 데이터를 입력할 때 스키마에 맞게 입력해야 하는 반면, NoSQL에서는 데이터를 읽어올 때 스키마에 따라 데이터를 읽어 온다. 이런 방식을 'schema on read'라고도 한다. 읽어올 때에만 데이터 스키마가 사용된다고 해서, 데이터를 쓸 때 정해진 방식이 없다는 의미는 아니다. 데이터를 입력하는 방식에 따라, 데이터를 읽어올 때 영향을 미친다.  

**- 대표적인 비관계형 데이터베이스**  
몽고DB, Casandra 등  

**- NoSQL 기반의 비관계형 데이터베이스 구성**  

- **Key-Value 타입**  
속성을 Key-Value의 쌍으로 나타내는 데이터를 배열의 형태로 저장한다. Key는 속성 이름을 뜻하고, Value는 속성에 연결된 데이터 값을 의미한다. Redis, Dynamo 등이 대표적인 Key-Value 형식의 데이터베이스다.  

- **문서형(Document) 데이터베이스**  
데이터를 테이블이 아닌 문서처럼 저장하는 데이터베이스를 의미. 많은 문서형 데이터베이스에서 JSON과 유사한 형식의 데이터를 문서화하여 저장한다. 각각의 문서는 하나의 속성에 대한 데이터를 가지고 있고, 컬렉션이라고 하는 그룹으로 묶어서 관리한다. 대표적인 문서형 데이터베이스에는 MongoDB가 있다.    

- **Wide-Column 데이터베이스**   
데이터베이스의 열(column)에 대한 데이터를 집중적으로 관리하는 데이터베이스다. 각 열에는 key-value 형식으로 데이터가 저장되고, 컬럼 패밀리(column families)라고 하는 열의 집합체 단위로 데이터를 처리할 수 있다. 하나의 행에 많은 열을 포함할 수 있어서 유연성을 높다. 데이터 처리에 필요한 열을 유연하게 선택할 수 있다는 점에서 규모가 큰 데이터 분석에 주로 사용되는 데이터베이스 형식이다. 대표적인 wide-column 데이터베이스는 Cassandra, HBase가 있다.   

- **그래프(Graph) 데이터베이스**   
자료구조의 그래프와 비슷한 형식으로 데이터 간의 관계를 구성하는 데이터베이스. 노드(nodes)에 속성별(entities)로 데이터를 저장한다. 각 노드간 관계는 선(edge)으로 표현한다. 대표적인 그래프 데이터베이스는 Neo4J, InfiniteGraph가 있다.   

**SQL 기반의 데이터베이스와 NoSQL 데이터베이스의 차이점**  

- **데이터 저장(Storage)**  
NoSQL은 key-value, document, wide-column, graph 등의 방식으로 데이터를 저장하고, 관계형 데이터베이스는 SQL을 이용해서 데이터를 테이블에 저장한다. 또한 SQL은 미리 작성된 스키마를 기반으로 정해진 형식에 맞게 데이터를 저장한다.  

- **스키마(Schema)**   
SQL을 사용하려면, 고정된 형식의 스키마가 필요해서 처리하려는 데이터 속성별로 열(column)에 대한 정보를 미리 정해둬야 한다. 스키마는 나중에 변경할 수 있지만, 이 경우 데이터베이스 전체를 수정하거나 오프라인(down-time)으로 전환할 필요가 있다. NoSQL은 관계형 데이터베이스보다 동적으로 스키마의 형태를 관리할 수 있다. 행을 추가할 때 즉시 새로운 열을 추가할 수 있고, 개별 속성에 대해서 모든 열에 대한 데이터를 입력하지 않아도 된다.   

- **쿼리(Querying)**   
쿼리는 데이터베이스에 대해서 정보를 요청하는 질의문으로, 관계형 데이터베이스는 테이블의 형식과 테이블간의 관계에 맞춰 데이터를 요청해야 한다. 그래서 정보를 요청할 때, SQL과 같이 구조화된 쿼리 언어를 사용한다. 비관계형 데이터베이스의 쿼리는 데이터 그룹 자체를 조회하는 것에 초점을 두고 있어서 구조화 되지 않은 쿼리 언어로도 데이터 요청이 가능하다. UnQL(UnStructured Query Language)이라고도 한다.   

- **확장성(Scalability)**  
일반적으로 SQL 기반의 관계형 데이터베이스는 수직적으로 확장한다. 높은 메모리, CPU를 사용하는 확장이라고도 한다. 데이터베이스가 구축된 하드웨어의 성능을 많이 이용하기 때문에 비용이 많이 들고, 여러 서버에 걸쳐서 데이터베이스의 관계를 정의할 수 있지만, 복잡하고 시간이 많이 소모된다. NoSQL로 구성된 데이터베이스는 수평적으로 확장한다. 값싼 서버 증설, 또는 클라우드 서비스 이용하는 확장이라고도 한다. NoSQL 데이터베이스를 위한 서버를 추가적으로 구축하면, 많은 트래픽을 편리하게 처리할 수 있다. 그리고 저렴한 범용 하드웨어나 클라우드 기반의 인스턴스에 NoSQL 데이터베이스를 호스팅할 수 있어서, 수직적 확장보다 상대적으로 비용이 저렴하다.   

**SQL과 NoSQL 사용**   

NoSQL 기반의 비관계형 데이터베이스가 확장성이나 속도면에서 더 뛰어나지만, 고차원으로 구조화된 SQL 기반의 데이터베이스가 더 좋은 성능을 보여주는 서비스도 있다.   

**👉🏻 (SQL) 관계형 데이터베이스를 사용하는 경우**  

**1. 데이터베이스의 ACID 성질을 준수해야 할 때**  
ACID는 Atomicity(원자성), Consistency(일관성), Isolation(격리성), Durability(지속성)을 의미한다. 각 단어는 데이터베이스에서 실행되는 하나의 트랜잭션(Transaction)에 의한 상태의 변화를 수행하는 과정에서, 안전성을 보장하기 위해 필요한 성질이다. SQL을 사용하면 데이터베이스와 상호 작용하는 방식을 정확하게 규정할 수 있기 때문에, 데이터를 처리할 때 발생할 수 있는 예외적인 상황을 줄이고, 데이터베이스의 무결성을 보호할 수 있다. 전자 상거래를 비롯한 모든 금융 서비스를 위한 소프트웨어 개발에서는 반드시 데이터베이스의 ACID 성질을 준수해야 한다.  

**2. 소프트웨어에 사용되는 데이터가 구조적이고 일관적일 때**  
소프트웨어(프로젝트)의 규모가 많은 서버를 필요로 하지 않고 일관된 데이터를 사용하는 경우, 관계형 데이터베이스를 사용하는 경우가 많다. 다양한 데이터 유형과 높은 트래픽을 지원하도록 설계된 NoSQL 데이터베이스를 사용해야 하는 이유가 없기 때문이다.  

**👉🏻 (NoSQL) 비관계형 데이터베이스를 사용하는 경우**  

**1. 데이터의 구조가 거의 또는 전혀 없는 대용량의 데이터를 저장할 때**  
대부분의 NoSQL 데이터베이스는 저장할 수 있는 데이터의 유형에 제한이 없다. 필요에 따라, 데이터의 새 유형을 추가할 수 있어서, 소프트웨어 개발에 정형화 되지 않은 많은 양의 데이터가 필요한 경우, NoSQL을 적용하는 것이 더 효율적이다.  

**2. 클라우드 컴퓨팅 및 저장공간을 최대한 활용할 때**  
클라우드 기반으로 데이터베이스 저장소를 구축하면, 저렴한 비용의 솔루션을 제공받을 수 있다. 소프트웨어에 데이터베이스의 확장성이 중요하다면, 번거로움 없이 확장할 수 있는 NoSQL 데이터베이스를 사용하는 것이 좋다.  

**3. 빠르게 서비스를 구축하는 과정에서 데이터 구조를 자주 업데이트 할 때**  
스키마를 미리 준비할 필요가 없기 때문에 빠르게 개발하는 과정에 유리하다. 시장에 빠르게 프로토타입을 출시해야 하는 경우가 이에 해당한다. 또한 소프트웨어 버전별로 많은 다운타임(데이터베이스 서버를 오프라인으로 전환하여 데이터 처리를 진행하는 작업 시간) 없이 데이터 구조를 자주 업데이트 해야하는 경우, 스키마를 매번 수정하는 관계형 데이터베이스 보다 NoSQL 기반의 비관계형 데이터베이스가 더 적합하다.  

-----
## 설계  
### 데이터베이스 설계  

>**관계형 데이터베이스**  
>
구조화된 데이터는 하나의 테이블로 표현할 수 있다. 사전에 정의된 테이블을 relation 이라고도 부르기 때문에, 테이블을 사용하는 데이터베이스를 관계형 데이터베이스(Relational database)라고 한다.

**관계형 데이터베이스 키워드**  

|키워드|설명|
|:--:|:--:|
|data| 각 항목에 저장되는 값|
|table, relation| 미리 정의한 열의 데이터 타입대로 작성된 데이터가 행으로 축적|
|column, field| 테이블의 한 열|
|record, tuple| 테이블의 한 행에 저장된 데이터|
|key| 테이블의 각 레코드를 구분할 수 있는 값으로, 각 레코드마다 고유한 값을 가진다. (기본키-primary key와 외래키-foreign key 등이 있다.|

**관계 종류**   

- 1:1 관계  
- 1:N 관계  
- N:N 관계  
- self referencing 관계 (테이블 스스로 관계를 가질 수도 있다)  

**- 1:1 관계**  
하나의 레코드가 다른 테이블의 레코드 한 개와 연결된 경우.   

![](https://velog.velcdn.com/images/wlsk124/post/753121ba-768d-4de2-b30c-3b388dda3f39/image.png)  

user 테이블에 class_id는 외래키(foreign key)로써, class 테이블의 class_id와 연결되어 있다. 각 수업은 단 한 명의 유저와 연결되어 있고, 그 반대도 동일하다면, User 테이블과 class 테이블은 1:1 관계(One-to-one relationship)이다.  

그러나 1:1 관계는 자주 사용하지 않는다. 1:1로 나타낼 수 있는 관계라면 User 테이블에 class_id를 대신해 class_name을 직접 저장하는 게 나을 수 있다.  

**- 1:N 관계**  
하나의 레코드가 서로 다른 여러 개의 레코드와 연결된 경우.  

![](https://velog.velcdn.com/images/wlsk124/post/0c9d2306-aee0-492a-a107-f72383b28bd6/image.png)  

한 명의 유저가 여러개의 수업을 가질 수 있지만 여러명의 유저가 하나의 수업을 가질 수는 없다. 1:N(일대다) 관계는 관계형 데이터베이스에서 가장 많이 사용한다.  

**- N:N 관계**  
여러 개의 레코드가 다른 테이블의 여러 개의 레코드와 관계가 있는 경우.  

![](https://velog.velcdn.com/images/wlsk124/post/06c50b1d-6c21-4f57-948f-8d558e0298f4/image.png)    

N:N 관계의 스키마를 디자인할 때에는, Join 테이블을 만들어 관리한다.  
다대다 관계는 두 개의 일대다 관계와 모양이 같고, 양방향에서 다수의 레코드를 가질 수 있다. 두 개의 테이블과 1:N(일대다) 관계를 형성하는 새로운 테이블로 N:N(다대다) 관계를 나타낼 수 있다.  

user_class 테이블에서는 유저 한 명이 여러 개의 수업을 가질 수 있고, 수업 하나가 여러 개의 유저을 가질 수 있다. user_class 테이블은 user_id와 class_id를 묶어주는 역할로, 이 테이블을 통해 어떤 유저가 몇 개의 수업을 신청했는지 또는, 어떤 수업이 몇 명의 유저를 가지고 있는지 등을 확인할 수 있다. 이렇게 조인 테이블을 생성하더라도, 조인 테이블을 위한 기본키(uc_id)는 반드시 있어야 한다.     

**- Self Referencing 관계**   
보통 자기참조 관계 테이블은 부서 정보 혹은 추천인이 누구인지 파악하는 것과 같은 상하 관계를 나타내야 하는 경우 사용한다.  

![](https://velog.velcdn.com/images/wlsk124/post/0d90ac37-df46-424e-999a-1d304d00abc4/image.png)  

user 테이블의 recommend_id는 user 테이블의 user_id와 연결되어 있다. 한 명의 유저(user_id)는 한 명의 추천인(recommend_id)를 가질 수 있지만, 여러 명이 한 명의 유저를 추천인으로 등록할 수 있다. 이 관계는 1:N(일대다) 관계와 유사하다고 생각할 수 있지만, 일반적으로 일대다 관계는 서로 다른 테이블의 관계를 나타낼 때 표현하는 방법이다.  

### SQL 내장함수  

📍 집합연산: 레코드를 조회하고 분류한 뒤, 특정 작업을 하는 연산  

**GROUP BY**  
데이터를 조회할 때 그룹으로 묶어서 조회한다.  

```sql
SELECT * FROM User --User 테이블의 모든 레코드를 조회
GROUP BY state; --User 테이블의 모든 레코드를 state에 따라 그룹화
```

GROUP BY 쿼리로 간단하게 state에 따라 그룹화할 수 있다. 쿼리의 결과에서 데이터가 중간에 비어있는 것을 확인할 수 있다. 데이터베이스에서 데이터를 불러오는 과정에서 state에 따라 그룹을 지정했지만, 그룹 대한 작업없이 조회만 했기 때문에 쿼리의 결과로 나타나는 데이터는 각 그룹의 첫번째 데이터만 표현된다.  

**HAVING**  
HAVING은 GROUP BY로 조회된 결과를 필터링할 수 있다.  

```sql
SELECT userId, AVG(Total)
FROM Invoices
GROUP BY userId --Invoices 테이블을 userId로 그룹화
HAVING AVG(Total) > 10.00  --평균 10.00을 초과한 결과를 조회
```

모든 유저의 주문서에서 가격의 평균을 구한 뒤에, 그 평균이 10.00이 넘는 결과만 조회한다. 이렇게 GROUP BY로 그룹을 지은 결과에 필터를 적용할 때, HAVING을 사용할 수 있다.  

**📍HAVING vs. WHERE**  
HAVING은 WHERE과는 적용하는 방식이 다르다. HAVING은 그룹화한 결과에 대한 필터이고, WHERE는 저장된 레코드를 필터링한다. 따라서 실제로 그룹화 전에 데이터를 필터해야 한다면, WHERE을 사용한다.  

**COUNT()**  
COUNT 함수는 레코드의 갯수를 헤아릴 때 사용한다.  

```sql
SELECT *, COUNT(*) FROM User --모든 레코드(*)에 대한 COUNT 함수 사용
GROUP BY state;
```
각 그룹의 첫번째 레코드와 각 그룹의 레코드 갯수를 집계해서 리턴한다.  
그룹으로 묶인 결과의 레코드 갯수를 확인할 수 있다.  

**SUM()**  
SUM 함수는 레코드의 합을 리턴한다.  

```sql
SELECT invoiceId, SUM(unitPrice) --SUM 함수 사용
FROM Invoice_items
GROUP BY invoiceId;
```
Invoice_items라는 테이블에서 invoiceId 필드를 기준으로 그룹하고, unitPrice 필드 값의 합을 구한다.  

**AVG()**   
AVG 함수는 레코드의 평균값을 계산하는 함수이다.  

```sql
SELECT trackId, AVG(unitPrice) --AVG 함수 사용
FROM Invoice_items
GROUP BY trackId;
```

**MAX(), MIN()**   
MAX 함수와 MIN 함수는 각각 레코드의 최대값과 최소값을 리턴한다.  

```sql
SELECT userId, MIN(Total) --각 유저가 지불한 최소 금액을 리턴
FROM Invoices
GROUP BY userId
```

>**SELECT 실행 순서**  
데이터를 조회하는 SELECT 문은 정해진 순서대로 동작한다.  
>
FROM -> WHERE -> GROUP BY -> HAVING -> SELECT -> ORDER BY 
>
```sql
SELECT userId, AVG(Total)
FROM Invoices --Invoices 테이블에 접근
WHERE userId >= 5 --userId 필드가 5 이상인 레코드들을 조회
GROUP BY userId --userId를 기준으로 그룹화
HAVING SUM(Total) >= 20 --Total 필드의 총합이 20이상인 결과들만 필터링
ORDER BY 2 --AVG(Total) 2번째 컬럼 기준으로 오름차순 정렬한 결과 리턴
```

-----
## 데이터베이스 정규화  

>**데이터베이스 정규화 (Database Normalization)**  
>
데이터베이스 설계가 결론적으로 데이터가 어떻게 저장될 지 구조를 정해주기 때문에 데이터베이스 정규화는 데이터베이스의 설계와 연관되어 있다.   

### Data Redundancy  

데이터 중복 (data redundancy)은 실제 데이터의 동일한 복사본이나 부분적인 복사본을 뜻한다.  

물론 이러한 중복성으로 데이터를 복구할 때에 더 수월할 수도 있지만 데이터베이스 내에서는 몇가지 문제점들을 지닌다.  

**문제점**  

- 일관된 자료 처리의 어려움
- 저장 공간 낭비
- 데이터 효율성 감소  

### Data Integrity  

데이터 무결성 (data integrity)은 데이터의 수명 주기 동안 정확성과 일관성을 유지하는 것을 뜻한다.  

즉, 입력된 데이터가 오염되지 않고 입력된 그대로 데이터를 사용할 수 있다는 뜻이기도 한다.

### Anomaly  

데이터 이상 현상 (anomaly)와 같은 경우에는 데이터에서 기대한 것과 다른 이상 현상을 가리킨다.  

**3가지 현상**  

- 갱신 이상 (update anomaly)  
- 삽입 이상 (insertion anomaly)  
- 삭제 이상 (deletion anomaly)  

**- Update Anomaly**  
갱신 이상(update anomaly)은 동일한 데이터가 여러 행 (레코드)에 걸쳐 있을 때에 어느 데이터를 갱신해야 하는지에 대한 논리적 일관성이 없어 발생한다.   
![](https://velog.velcdn.com/images/wlsk124/post/9ca307b6-0f4c-4430-8764-c1b3dee08d42/image.png)   

테이블이 존재하고 두 개의 레코드가 동일한 사람일 때(519번), 갱신을 하게 되는 경우 어떤 데이터를 해야 하는지에 대한 문제가 발생한다.  


**- Insertion Anomaly**  
삽입 이상(insertion anomaly)은 데이터 삽입을 못하는 경우를 가리킨다.  
![](https://velog.velcdn.com/images/wlsk124/post/0b5e1fd2-9495-49ea-bc86-61ad0a947674/image.png)  

새로운 직원이 들어왔을 때(Dr. Newsome), 아직 가르칠 수업이 안 정해진 경우에는 데이터에 추가되지 못한다. 수업을 NULL와 같은 값으로 지정 하지 않은 이상 담당 수업이 있어야 추가될 수 있는 이상 현상이 발생한다.  

**- Deletion Anomaly**  
삭제 이상(deletion anomaly)와 같은 경우에는 데이터의 특정 부분을 지울 때에 의도치 않게 다른 부분들도 함께 지워지는 이상 현상이다.  
![](https://velog.velcdn.com/images/wlsk124/post/617b974d-a8f2-42c4-be7a-59a8d8bb5ecd/image.png)  

한 직원이 담당하는 수업이 사라지는 것을 적용할 때 발생한다. 한 직원 데이터의 수업 관련 데이터를 지우기 위해서는 레코드 전체가 사라져 의도치 않게 직원의 다른 데이터들도 같이 삭제되는 현상이 발생한다.

-----
## SQL 심화  

### **SQL 종류**  

**SQL 문법 분류**  

- Data Definition Language  
- Data Manipulation Language  
- Data Control Language  
- Data Query Language  
- Transaction Control Language  

**- Data Definition Language(DDL)**  
DDL(Data Definition Language)은 데이터를 정의할 때 사용하는 언어다. 테이블을 만들 때 사용하는 CREATE나 테이블을 제거할 때 사용되는 DROP 등이 DDL에 해당된다.  
📍 데이터베이스의 테이블과 같은 오브젝트를 정의할 때 사용.  

**- Data Manipulation Language(DML)**  
DML(Data Manipulation Language)은 데이터베이스에 데이터를 저장할 때 사용하는 언어다. INSERT처럼 새로운 레코드를 추가할 때 사용되는 문법을 포함해 데이터를 삭제하는 DELETE나, 변경하는 UPDATE가 DML에 포함된다.  

**- Data Control Language(DCL)**  
DCL(Data Control Language)은 데이터베이스에 대한 접근 권한과 관련된 문법이다. 어느 유저가 데이터베이스에 접근할 수 있는지 권한을 설정한다. 권한을 주는 GRANT나, 권한을 가져가는 REVOKE 등이 DCL에 포함된다.  

**- Data Query Language(DQL)**  
DQL(Data Query Language)은 정해진 스키마 내에서 쿼리할 수 있는 언어다. SELECT가 DQL에 해당된다. DQL을 DML의 일부분으로 취급하기도 한다.  

**- Transaction Control Language(TCL)**
TCL(Transaction Control Language)은 DML을 거친 데이터의 변경사항을 수정할 수 있다. COMMIT처럼 DML이 작업한 내용을 데이터베이스에 커밋하거나, ROLLBACK처럼 커밋했던 내용을 다시 롤백하는 문법이 있다.  

### SQL 심화  

**CASE 사용**  
SQL에서도 프로그래밍 언어의 if문과 같은 기능을 사용할 수 있다. CASE를 사용하면, 특정 조건에 따라 다른 결과를 받을 수 있다.  

```sql
SELECT CASE
			WHEN CustomerId <= 25 THEN 'GROUP 1'
			WHEN CustomerId <= 50 THEN 'GROUP 2'
			ELSE 'GROUP 3'
		END
	FROM customers
```

-> CustomerId 필드값에 따라 3개의 그룹('GROUP 1', 'GROUP 2', 'GROUP 3')으로 나뉜다. CustomerId 필드값이 25 이하인 경우에는 'GROUP 1', 26부터 50 사이인 경우에는 'GROUP 2', 51 이상은 'GROUP 3'으로 분류한다.  

**SUBQUERY**  
쿼리문을 작성할 때, 다른 쿼리문을 포함할 수 있다. 이 때 포함되는 다른 쿼리문이 SUBQUERY(서브쿼리)이고, 서브쿼리는 실행되는 쿼리에 중첩으로 위치해, 정보를 전달한다. 서브쿼리는 소괄호로 감싸야 한다. 서브쿼리의 결과는 개별 값이나 레코드 리스트이고, 결과를 하나의 칼럼으로 사용할 수 있다.  

```sql
SELECT CustomerId, CustomerId = (SELECT CustomerId FROM customers WHERE CustomerId = 2)
FROM customers
WHERE CustomerId < 6
```

**IN, NOT IN**  
IN은 특정한 값이 서브쿼리에 있는지 확인할 수 있다.  

```sql
--서브쿼리와 IN 사용 예시
SELECT *
FROM customers
WHERE CustomerId IN (SELECT CustomerId FROM customers WHERE CustomerId < 10)
```
customers 테이블에서 'CustomerId'의 값이 서브쿼리에서 돌려받는 값에 속한 결과들만 조회하고 있다. 서브쿼리에서는 'CustomerId' 가 10 이하인 데이터를 돌려주기 때문에, 최종 조회된 데이터의 'CustomerId'도 10 이하다.  
📍 만약 IN 대신 NOT IN 을 사용하면, 서브쿼리에서 조회된 10 미만을 제외한(10을 초과하는) 레코드를 조회한다.  

**EXISTS**   
EXISTS 또는 NOT EXISTS는 돌려받은 서브쿼리에 존재하는 레코드를 확인한다. 만약 조회하려는 레코드가 존재한다면 참(TRUE)을, 그렇지 않은 경우에는 거짓(FALSE)을 리턴한다.  

```sql
--서브쿼리와 EXISTS 예시
SELECT EmployeeId
FROM employees e
WHERE EXISTS (
	SELECT 1
	FROM customers c
	WHERE c.SupportRepId = e.EmployeeId
	)
ORDER BY EmployeeId
```
employees 테이블에서부터 'EmployeeId' 필드를 조회한다. 이때 서브쿼리로 customers 테이블의 'SupportRepId' 필드값과 employees 테이블의 'EmployeeId' 필드값을 비교해 일치하는 레코드들을 가져온다.  

**FROM**  
쿼리문과 서브쿼리를 사용해 조회된 결과를 하나의 테이블이나 조회할 대상으로 지정해 사용할 수 있다.  

```sql
--FROM 내에 서브쿼리 사용 예시
SELECT *
FROM (
	SELECT CustomerId
	FROM customers
	WHERE CustomerId < 10
	)
```

### [SQL Cheat Sheet](https://websitesetup.org/wp-content/uploads/2020/08/SQL-Cheat-Sheet-websitesetup.pdf)
